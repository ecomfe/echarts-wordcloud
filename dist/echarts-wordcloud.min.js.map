{"version":3,"sources":["webpack://echarts-wordcloud/webpack/universalModuleDefinition","webpack://echarts-wordcloud/./src/WordCloudSeries.js","webpack://echarts-wordcloud/./src/WordCloudView.js","webpack://echarts-wordcloud/./src/layout.js","webpack://echarts-wordcloud/./src/wordCloud.js","webpack://echarts-wordcloud/external \"echarts\"","webpack://echarts-wordcloud/webpack/bootstrap","webpack://echarts-wordcloud/webpack/startup","webpack://echarts-wordcloud/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__83__","type","visualStyleAccessPath","visualStyleMapper","model","fill","get","visualDrawType","optionUpdated","option","this","gridSize","Math","max","floor","getInitialData","ecModel","dimensions","data","coordDimensions","list","initData","defaultOption","maskImage","shape","left","top","width","height","sizeRange","rotationRange","rotationStep","drawOutOfBound","textStyle","fontWeight","render","seriesModel","api","group","removeAll","getData","layoutInstance","ondraw","text","size","dataIdx","drawn","itemModel","getItemModel","textStyleModel","getModel","textEl","style","scaleX","info","mu","scaleY","x","gx","gw","y","gy","gh","rotation","rot","setStyle","fillTextOffsetX","fillTextOffsetY","verticalAlign","getItemVisual","fontSize","add","setItemGraphicEl","ensureState","state","stateTransition","duration","easing","__highDownDispatcher","_model","remove","dispose","window","setImmediate","msSetImmediate","webkitSetImmediate","mozSetImmediate","oSetImmediate","postMessage","addEventListener","callbacks","undefined","message","evt","substr","length","stopImmediatePropagation","id","parseInt","clearImmediate","callback","push","toString","fn","setTimeout","msClearImmediate","webkitClearImmediate","mozClearImmediate","oClearImmediate","timer","clearTimeout","isSupported","canvas","document","createElement","getContext","ctx","getImageData","fillText","Array","prototype","some","minFontSize","hanWidth","mWidth","font","measureText","shuffleArray","arr","j","i","random","WordCloud","elements","options","isArray","forEach","el","getElementById","tagName","appendChild","settings","fontFamily","color","minSize","weightFactor","clearCanvas","backgroundColor","origin","drawMask","maskColor","maskGapWidth","layoutAnimation","wait","abortThreshold","abort","minRotation","PI","maxRotation","shuffle","rotateRatio","ellipticity","classes","hover","click","key","factor","pt","theta","sin","thetaPrime","cos","sqrt","grid","ngx","ngy","center","maxRadius","escapeTime","getTextColor","g","maskRectWidth","abs","min","random_hsl_color","getTextClasses","hovered","interactive","infoGrid","getInfoGridFromMouseTouchEvent","clientX","clientY","currentTarget","rect","getBoundingClientRect","touches","eventX","eventY","wordcloudhover","item","dimension","wordcloudclick","preventDefault","pointsAtRadius","getPointsAtRadius","radius","T","t","points","rx","exceedTime","Date","getTime","fillGridAt","fillRect","sendEvent","cancelable","detail","createEvent","initCustomEvent","dispatchEvent","ceil","loopingFunction","stoppingFunction","fillStyle","clearRect","textContent","position","bctx","bgPixel","imageData","singleGridLoop","e","webkitTapHighlightColor","stopInteraction","removeEventListener","layouting","cb","listener","anotherWordCloudStart","loop","word","weight","attributes","gxy","rotateDeg","round","fcanvas","fctx","willReadFrequently","fw","fh","boxWidth","boxHeight","fgw","fgh","cgh","cgw","setAttribute","scale","translate","rotate","textBaseline","occupied","bounds","fillTextWidth","fillTextHeight","getTextInfo","r","concat","res","px","py","canFitText","distance","save","restore","span","transformRule","styleRules","cssProp","attribute","className","drawText","w","h","updateGrid","putWord","canceled","start","toFixed","Error","eachSeriesByType","gridRect","getBoxLayoutParams","getWidth","getHeight","drawImage","maskCanvas","newImageData","createImageData","toneSum","toneCnt","tone","threshold","putImageData","updateCanvasMask","console","error","valueExtent","getDataExtent","DEGREE_TO_RAD","onWordCloudDrawn","mapArray","value","idx","getName","sort","a","b","series","compats","compatTextStyle","hasOwnProperty","seriesItem","normal","emphasis","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","Symbol","toStringTag","Object","defineProperty"],"mappings":"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","file":"echarts-wordcloud.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"echarts\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"echarts\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echarts-wordcloud\"] = factory(require(\"echarts\"));\n\telse\n\t\troot[\"echarts-wordcloud\"] = factory(root[\"echarts\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__83__) {\nreturn ","import * as echarts from 'echarts/lib/echarts';\n\necharts.extendSeriesModel({\n\n    type: 'series.wordCloud',\n\n    visualStyleAccessPath: 'textStyle',\n    visualStyleMapper: function (model) {\n        return {\n            fill: model.get('color')\n        };\n    },\n    visualDrawType: 'fill',\n\n    optionUpdated: function () {\n        var option = this.option;\n        option.gridSize = Math.max(Math.floor(option.gridSize), 4);\n    },\n\n    getInitialData: function (option, ecModel) {\n        var dimensions = echarts.helper.createDimensions(option.data, {\n            coordDimensions: ['value']\n        });\n        var list = new echarts.List(dimensions, this);\n        list.initData(option.data);\n        return list;\n    },\n\n    // Most of options are from https://github.com/timdream/wordcloud2.js/blob/gh-pages/API.md\n    defaultOption: {\n\n        maskImage: null,\n\n        // Shape can be 'circle', 'cardioid', 'diamond', 'triangle-forward', 'triangle', 'pentagon', 'star'\n        shape: 'circle',\n\n        left: 'center',\n\n        top: 'center',\n\n        width: '70%',\n\n        height: '80%',\n\n        sizeRange: [12, 60],\n\n        rotationRange: [-90, 90],\n\n        rotationStep: 45,\n\n        gridSize: 8,\n\n        drawOutOfBound: false,\n\n        textStyle: {\n            fontWeight: 'normal'\n        }\n    }\n});\n","import * as echarts from 'echarts/lib/echarts';\n\necharts.extendChartView({\n\n    type: 'wordCloud',\n\n    render: function (seriesModel, ecModel, api) {\n        var group = this.group;\n        group.removeAll();\n\n        var data = seriesModel.getData();\n\n        var gridSize = seriesModel.get('gridSize');\n\n        seriesModel.layoutInstance.ondraw = function (text, size, dataIdx, drawn) {\n            var itemModel = data.getItemModel(dataIdx);\n            var textStyleModel = itemModel.getModel('textStyle');\n\n            var textEl = new echarts.graphic.Text({\n                style: echarts.helper.createTextStyle(textStyleModel),\n                scaleX: 1 / drawn.info.mu,\n                scaleY: 1 / drawn.info.mu,\n                x: (drawn.gx + drawn.info.gw / 2) * gridSize,\n                y: (drawn.gy + drawn.info.gh / 2) * gridSize,\n                rotation: drawn.rot\n            });\n            textEl.setStyle({\n                x: drawn.info.fillTextOffsetX,\n                y: drawn.info.fillTextOffsetY + size * 0.5,\n                text: text,\n                verticalAlign: 'middle',\n                fill: data.getItemVisual(dataIdx, 'style').fill,\n                fontSize: size\n            });\n\n            group.add(textEl);\n\n            data.setItemGraphicEl(dataIdx, textEl);\n\n            textEl.ensureState('emphasis').style = echarts.helper.createTextStyle(itemModel.getModel(['emphasis', 'textStyle']), {\n                state: 'emphasis'\n            });\n            textEl.ensureState('blur').style = echarts.helper.createTextStyle(itemModel.getModel(['blur', 'textStyle']), {\n                state: 'blur'\n            });\n\n            echarts.helper.enableHoverEmphasis(\n                textEl,\n                itemModel.get(['emphasis', 'focus']),\n                itemModel.get(['emphasis', 'blurScope'])\n            );\n\n            textEl.stateTransition = {\n                duration: seriesModel.get('animation') ? seriesModel.get(['stateAnimation', 'duration']) : 0,\n                easing: seriesModel.get(['stateAnimation', 'easing'])\n            };\n            // TODO\n            textEl.__highDownDispatcher = true;\n        };\n\n        this._model = seriesModel;\n    },\n\n    remove: function () {\n        this.group.removeAll();\n\n        this._model.layoutInstance.dispose();\n    },\n\n    dispose: function () {\n        this._model.layoutInstance.dispose();\n    }\n});\n","/*!\n * wordcloud2.js\n * http://timdream.org/wordcloud2.js/\n *\n * Copyright 2011 - 2013 Tim Chien\n * Released under the MIT license\n */\n\n'use strict';\n\n// setImmediate\nif (!window.setImmediate) {\n  window.setImmediate = (function setupSetImmediate() {\n    return window.msSetImmediate ||\n    window.webkitSetImmediate ||\n    window.mozSetImmediate ||\n    window.oSetImmediate ||\n    (function setupSetZeroTimeout() {\n      if (!window.postMessage || !window.addEventListener) {\n        return null;\n      }\n\n      var callbacks = [undefined];\n      var message = 'zero-timeout-message';\n\n      // Like setTimeout, but only takes a function argument.  There's\n      // no time argument (always zero) and no arguments (you have to\n      // use a closure).\n      var setZeroTimeout = function setZeroTimeout(callback) {\n        var id = callbacks.length;\n        callbacks.push(callback);\n        window.postMessage(message + id.toString(36), '*');\n\n        return id;\n      };\n\n      window.addEventListener('message', function setZeroTimeoutMessage(evt) {\n        // Skipping checking event source, retarded IE confused this window\n        // object with another in the presence of iframe\n        if (typeof evt.data !== 'string' ||\n            evt.data.substr(0, message.length) !== message/* ||\n            evt.source !== window */) {\n          return;\n        }\n\n        evt.stopImmediatePropagation();\n\n        var id = parseInt(evt.data.substr(message.length), 36);\n        if (!callbacks[id]) {\n          return;\n        }\n\n        callbacks[id]();\n        callbacks[id] = undefined;\n      }, true);\n\n      /* specify clearImmediate() here since we need the scope */\n      window.clearImmediate = function clearZeroTimeout(id) {\n        if (!callbacks[id]) {\n          return;\n        }\n\n        callbacks[id] = undefined;\n      };\n\n      return setZeroTimeout;\n    })() ||\n    // fallback\n    function setImmediateFallback(fn) {\n      window.setTimeout(fn, 0);\n    };\n  })();\n}\n\nif (!window.clearImmediate) {\n  window.clearImmediate = (function setupClearImmediate() {\n    return window.msClearImmediate ||\n    window.webkitClearImmediate ||\n    window.mozClearImmediate ||\n    window.oClearImmediate ||\n    // \"clearZeroTimeout\" is implement on the previous block ||\n    // fallback\n    function clearImmediateFallback(timer) {\n      window.clearTimeout(timer);\n    };\n  })();\n}\n\n  // Check if WordCloud can run on this browser\n  var isSupported = (function isSupported() {\n    var canvas = document.createElement('canvas');\n    if (!canvas || !canvas.getContext) {\n      return false;\n    }\n\n    var ctx = canvas.getContext('2d');\n    if (!ctx.getImageData) {\n      return false;\n    }\n    if (!ctx.fillText) {\n      return false;\n    }\n\n    if (!Array.prototype.some) {\n      return false;\n    }\n    if (!Array.prototype.push) {\n      return false;\n    }\n\n    return true;\n  }());\n\n  // Find out if the browser impose minium font size by\n  // drawing small texts on a canvas and measure it's width.\n  var minFontSize = (function getMinFontSize() {\n    if (!isSupported) {\n      return;\n    }\n\n    var ctx = document.createElement('canvas').getContext('2d');\n\n    // start from 20\n    var size = 20;\n\n    // two sizes to measure\n    var hanWidth, mWidth;\n\n    while (size) {\n      ctx.font = size.toString(10) + 'px sans-serif';\n      if ((ctx.measureText('\\uFF37').width === hanWidth) &&\n          (ctx.measureText('m').width) === mWidth) {\n        return (size + 1);\n      }\n\n      hanWidth = ctx.measureText('\\uFF37').width;\n      mWidth = ctx.measureText('m').width;\n\n      size--;\n    }\n\n    return 0;\n  })();\n\n  // Based on http://jsfromhell.com/array/shuffle\n  var shuffleArray = function shuffleArray(arr) {\n    for (var j, x, i = arr.length; i;\n      j = Math.floor(Math.random() * i),\n      x = arr[--i], arr[i] = arr[j],\n      arr[j] = x) {}\n    return arr;\n  };\n\n  var WordCloud = function WordCloud(elements, options) {\n    if (!isSupported) {\n      return;\n    }\n\n    if (!Array.isArray(elements)) {\n      elements = [elements];\n    }\n\n    elements.forEach(function(el, i) {\n      if (typeof el === 'string') {\n        elements[i] = document.getElementById(el);\n        if (!elements[i]) {\n          throw 'The element id specified is not found.';\n        }\n      } else if (!el.tagName && !el.appendChild) {\n        throw 'You must pass valid HTML elements, or ID of the element.';\n      }\n    });\n\n    /* Default values to be overwritten by options object */\n    var settings = {\n      list: [],\n      fontFamily: '\"Trebuchet MS\", \"Heiti TC\", \"微軟正黑體\", ' +\n                  '\"Arial Unicode MS\", \"Droid Fallback Sans\", sans-serif',\n      fontWeight: 'normal',\n      color: 'random-dark',\n      minSize: 0, // 0 to disable\n      weightFactor: 1,\n      clearCanvas: true,\n      backgroundColor: '#fff',  // opaque white = rgba(255, 255, 255, 1)\n\n      gridSize: 8,\n      drawOutOfBound: false,\n      origin: null,\n\n      drawMask: false,\n      maskColor: 'rgba(255,0,0,0.3)',\n      maskGapWidth: 0.3,\n\n      layoutAnimation: true,\n\n      wait: 0,\n      abortThreshold: 0, // disabled\n      abort: function noop() {},\n\n      minRotation: - Math.PI / 2,\n      maxRotation: Math.PI / 2,\n      rotationStep: 0.1,\n\n      shuffle: true,\n      rotateRatio: 0.1,\n\n      shape: 'circle',\n      ellipticity: 0.65,\n\n      classes: null,\n\n      hover: null,\n      click: null\n    };\n\n    if (options) {\n      for (var key in options) {\n        if (key in settings) {\n          settings[key] = options[key];\n        }\n      }\n    }\n\n    /* Convert weightFactor into a function */\n    if (typeof settings.weightFactor !== 'function') {\n      var factor = settings.weightFactor;\n      settings.weightFactor = function weightFactor(pt) {\n        return pt * factor; //in px\n      };\n    }\n\n    /* Convert shape into a function */\n    if (typeof settings.shape !== 'function') {\n      switch (settings.shape) {\n        case 'circle':\n        /* falls through */\n        default:\n          // 'circle' is the default and a shortcut in the code loop.\n          settings.shape = 'circle';\n          break;\n\n        case 'cardioid':\n          settings.shape = function shapeCardioid(theta) {\n            return 1 - Math.sin(theta);\n          };\n          break;\n\n        /*\n        To work out an X-gon, one has to calculate \"m\",\n        where 1/(cos(2*PI/X)+m*sin(2*PI/X)) = 1/(cos(0)+m*sin(0))\n        http://www.wolframalpha.com/input/?i=1%2F%28cos%282*PI%2FX%29%2Bm*sin%28\n        2*PI%2FX%29%29+%3D+1%2F%28cos%280%29%2Bm*sin%280%29%29\n        Copy the solution into polar equation r = 1/(cos(t') + m*sin(t'))\n        where t' equals to mod(t, 2PI/X);\n        */\n\n        case 'diamond':\n        case 'square':\n          // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n          // %28t%2C+PI%2F2%29%29%2Bsin%28mod+%28t%2C+PI%2F2%29%29%29%2C+t+%3D\n          // +0+..+2*PI\n          settings.shape = function shapeSquare(theta) {\n            var thetaPrime = theta % (2 * Math.PI / 4);\n            return 1 / (Math.cos(thetaPrime) + Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'triangle-forward':\n          // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n          // %28t%2C+2*PI%2F3%29%29%2Bsqrt%283%29sin%28mod+%28t%2C+2*PI%2F3%29\n          // %29%29%2C+t+%3D+0+..+2*PI\n          settings.shape = function shapeTriangle(theta) {\n            var thetaPrime = theta % (2 * Math.PI / 3);\n            return 1 / (Math.cos(thetaPrime) +\n                        Math.sqrt(3) * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'triangle':\n        case 'triangle-upright':\n          settings.shape = function shapeTriangle(theta) {\n            var thetaPrime = (theta + Math.PI * 3 / 2) % (2 * Math.PI / 3);\n            return 1 / (Math.cos(thetaPrime) +\n                        Math.sqrt(3) * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'pentagon':\n          settings.shape = function shapePentagon(theta) {\n            var thetaPrime = (theta + 0.955) % (2 * Math.PI / 5);\n            return 1 / (Math.cos(thetaPrime) +\n                        0.726543 * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'star':\n          settings.shape = function shapeStar(theta) {\n            var thetaPrime = (theta + 0.955) % (2 * Math.PI / 10);\n            if ((theta + 0.955) % (2 * Math.PI / 5) - (2 * Math.PI / 10) >= 0) {\n              return 1 / (Math.cos((2 * Math.PI / 10) - thetaPrime) +\n                          3.07768 * Math.sin((2 * Math.PI / 10) - thetaPrime));\n            } else {\n              return 1 / (Math.cos(thetaPrime) +\n                          3.07768 * Math.sin(thetaPrime));\n            }\n          };\n          break;\n      }\n    }\n\n    /* Make sure gridSize is a whole number and is not smaller than 4px */\n    settings.gridSize = Math.max(Math.floor(settings.gridSize), 4);\n\n    /* shorthand */\n    var g = settings.gridSize;\n    var maskRectWidth = g - settings.maskGapWidth;\n\n    /* normalize rotation settings */\n    var rotationRange = Math.abs(settings.maxRotation - settings.minRotation);\n    var minRotation = Math.min(settings.maxRotation, settings.minRotation);\n    var rotationStep = settings.rotationStep;\n\n    /* information/object available to all functions, set when start() */\n    var grid, // 2d array containing filling information\n      ngx, ngy, // width and height of the grid\n      center, // position of the center of the cloud\n      maxRadius;\n\n    /* timestamp for measuring each putWord() action */\n    var escapeTime;\n\n    /* function for getting the color of the text */\n    var getTextColor;\n    function random_hsl_color(min, max) {\n      return 'hsl(' +\n        (Math.random() * 360).toFixed() + ',' +\n        (Math.random() * 30 + 70).toFixed() + '%,' +\n        (Math.random() * (max - min) + min).toFixed() + '%)';\n    }\n    switch (settings.color) {\n      case 'random-dark':\n        getTextColor = function getRandomDarkColor() {\n          return random_hsl_color(10, 50);\n        };\n        break;\n\n      case 'random-light':\n        getTextColor = function getRandomLightColor() {\n          return random_hsl_color(50, 90);\n        };\n        break;\n\n      default:\n        if (typeof settings.color === 'function') {\n          getTextColor = settings.color;\n        }\n        break;\n    }\n\n    /* function for getting the classes of the text */\n    var getTextClasses = null;\n    if (typeof settings.classes === 'function') {\n      getTextClasses = settings.classes;\n    }\n\n    /* Interactive */\n    var interactive = false;\n    var infoGrid = [];\n    var hovered;\n\n    var getInfoGridFromMouseTouchEvent =\n    function getInfoGridFromMouseTouchEvent(evt) {\n      var canvas = evt.currentTarget;\n      var rect = canvas.getBoundingClientRect();\n      var clientX;\n      var clientY;\n      /** Detect if touches are available */\n      if (evt.touches) {\n        clientX = evt.touches[0].clientX;\n        clientY = evt.touches[0].clientY;\n      } else {\n        clientX = evt.clientX;\n        clientY = evt.clientY;\n      }\n      var eventX = clientX - rect.left;\n      var eventY = clientY - rect.top;\n\n      var x = Math.floor(eventX * ((canvas.width / rect.width) || 1) / g);\n      var y = Math.floor(eventY * ((canvas.height / rect.height) || 1) / g);\n\n      return infoGrid[x][y];\n    };\n\n    var wordcloudhover = function wordcloudhover(evt) {\n      var info = getInfoGridFromMouseTouchEvent(evt);\n\n      if (hovered === info) {\n        return;\n      }\n\n      hovered = info;\n      if (!info) {\n        settings.hover(undefined, undefined, evt);\n\n        return;\n      }\n\n      settings.hover(info.item, info.dimension, evt);\n\n    };\n\n    var wordcloudclick = function wordcloudclick(evt) {\n      var info = getInfoGridFromMouseTouchEvent(evt);\n      if (!info) {\n        return;\n      }\n\n      settings.click(info.item, info.dimension, evt);\n      evt.preventDefault();\n    };\n\n    /* Get points on the grid for a given radius away from the center */\n    var pointsAtRadius = [];\n    var getPointsAtRadius = function getPointsAtRadius(radius) {\n      if (pointsAtRadius[radius]) {\n        return pointsAtRadius[radius];\n      }\n\n      // Look for these number of points on each radius\n      var T = radius * 8;\n\n      // Getting all the points at this radius\n      var t = T;\n      var points = [];\n\n      if (radius === 0) {\n        points.push([center[0], center[1], 0]);\n      }\n\n      while (t--) {\n        // distort the radius to put the cloud in shape\n        var rx = 1;\n        if (settings.shape !== 'circle') {\n          rx = settings.shape(t / T * 2 * Math.PI); // 0 to 1\n        }\n\n        // Push [x, y, t]; t is used solely for getTextColor()\n        points.push([\n          center[0] + radius * rx * Math.cos(-t / T * 2 * Math.PI),\n          center[1] + radius * rx * Math.sin(-t / T * 2 * Math.PI) *\n            settings.ellipticity,\n          t / T * 2 * Math.PI]);\n      }\n\n      pointsAtRadius[radius] = points;\n      return points;\n    };\n\n    /* Return true if we had spent too much time */\n    var exceedTime = function exceedTime() {\n      return ((settings.abortThreshold > 0) &&\n        ((new Date()).getTime() - escapeTime > settings.abortThreshold));\n    };\n\n    /* Get the deg of rotation according to settings, and luck. */\n    var getRotateDeg = function getRotateDeg() {\n      if (settings.rotateRatio === 0) {\n        return 0;\n      }\n\n      if (Math.random() > settings.rotateRatio) {\n        return 0;\n      }\n\n      if (rotationRange === 0) {\n        return minRotation;\n      }\n\n      return minRotation + Math.round(Math.random() * rotationRange / rotationStep) * rotationStep;\n    };\n\n    var getTextInfo = function getTextInfo(word, weight, rotateDeg) {\n      // calculate the acutal font size\n      // fontSize === 0 means weightFactor function wants the text skipped,\n      // and size < minSize means we cannot draw the text.\n      var debug = false;\n      var fontSize = settings.weightFactor(weight);\n      if (fontSize <= settings.minSize) {\n        return false;\n      }\n\n      // Scale factor here is to make sure fillText is not limited by\n      // the minium font size set by browser.\n      // It will always be 1 or 2n.\n      var mu = 1;\n      if (fontSize < minFontSize) {\n        mu = (function calculateScaleFactor() {\n          var mu = 2;\n          while (mu * fontSize < minFontSize) {\n            mu += 2;\n          }\n          return mu;\n        })();\n      }\n\n      var fcanvas = document.createElement('canvas');\n      var fctx = fcanvas.getContext('2d', { willReadFrequently: true });\n\n      fctx.font = settings.fontWeight + ' ' +\n        (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n\n      // Estimate the dimension of the text with measureText().\n      var fw = fctx.measureText(word).width / mu;\n      var fh = Math.max(fontSize * mu,\n                        fctx.measureText('m').width,\n                        fctx.measureText('\\uFF37').width) / mu;\n\n      // Create a boundary box that is larger than our estimates,\n      // so text don't get cut of (it sill might)\n      var boxWidth = fw + fh * 2;\n      var boxHeight = fh * 3;\n      var fgw = Math.ceil(boxWidth / g);\n      var fgh = Math.ceil(boxHeight / g);\n      boxWidth = fgw * g;\n      boxHeight = fgh * g;\n\n      // Calculate the proper offsets to make the text centered at\n      // the preferred position.\n\n      // This is simply half of the width.\n      var fillTextOffsetX = - fw / 2;\n      // Instead of moving the box to the exact middle of the preferred\n      // position, for Y-offset we move 0.4 instead, so Latin alphabets look\n      // vertical centered.\n      var fillTextOffsetY = - fh * 0.4;\n\n      // Calculate the actual dimension of the canvas, considering the rotation.\n      var cgh = Math.ceil((boxWidth * Math.abs(Math.sin(rotateDeg)) +\n                           boxHeight * Math.abs(Math.cos(rotateDeg))) / g);\n      var cgw = Math.ceil((boxWidth * Math.abs(Math.cos(rotateDeg)) +\n                           boxHeight * Math.abs(Math.sin(rotateDeg))) / g);\n      var width = cgw * g;\n      var height = cgh * g;\n\n      fcanvas.setAttribute('width', width);\n      fcanvas.setAttribute('height', height);\n\n      if (debug) {\n        // Attach fcanvas to the DOM\n        document.body.appendChild(fcanvas);\n        // Save it's state so that we could restore and draw the grid correctly.\n        fctx.save();\n      }\n\n      // Scale the canvas with |mu|.\n      fctx.scale(1 / mu, 1 / mu);\n      fctx.translate(width * mu / 2, height * mu / 2);\n      fctx.rotate(- rotateDeg);\n\n      // Once the width/height is set, ctx info will be reset.\n      // Set it again here.\n      fctx.font = settings.fontWeight + ' ' +\n        (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n\n      // Fill the text into the fcanvas.\n      // XXX: We cannot because textBaseline = 'top' here because\n      // Firefox and Chrome uses different default line-height for canvas.\n      // Please read https://bugzil.la/737852#c6.\n      // Here, we use textBaseline = 'middle' and draw the text at exactly\n      // 0.5 * fontSize lower.\n      fctx.fillStyle = '#000';\n      fctx.textBaseline = 'middle';\n      fctx.fillText(word, fillTextOffsetX * mu,\n                    (fillTextOffsetY + fontSize * 0.5) * mu);\n\n      // Get the pixels of the text\n      var imageData = fctx.getImageData(0, 0, width, height).data;\n\n      if (exceedTime()) {\n        return false;\n      }\n\n      if (debug) {\n        // Draw the box of the original estimation\n        fctx.strokeRect(fillTextOffsetX * mu,\n                        fillTextOffsetY, fw * mu, fh * mu);\n        fctx.restore();\n      }\n\n      // Read the pixels and save the information to the occupied array\n      var occupied = [];\n      var gx = cgw, gy, x, y;\n      var bounds = [cgh / 2, cgw / 2, cgh / 2, cgw / 2];\n      while (gx--) {\n        gy = cgh;\n        while (gy--) {\n          y = g;\n          singleGridLoop: {\n            while (y--) {\n              x = g;\n              while (x--) {\n                if (imageData[((gy * g + y) * width +\n                               (gx * g + x)) * 4 + 3]) {\n                  occupied.push([gx, gy]);\n\n                  if (gx < bounds[3]) {\n                    bounds[3] = gx;\n                  }\n                  if (gx > bounds[1]) {\n                    bounds[1] = gx;\n                  }\n                  if (gy < bounds[0]) {\n                    bounds[0] = gy;\n                  }\n                  if (gy > bounds[2]) {\n                    bounds[2] = gy;\n                  }\n\n                  if (debug) {\n                    fctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n                    fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n                  }\n                  break singleGridLoop;\n                }\n              }\n            }\n            if (debug) {\n              fctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\n              fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n            }\n          }\n        }\n      }\n\n      if (debug) {\n        fctx.fillStyle = 'rgba(0, 255, 0, 0.5)';\n        fctx.fillRect(bounds[3] * g,\n                      bounds[0] * g,\n                      (bounds[1] - bounds[3] + 1) * g,\n                      (bounds[2] - bounds[0] + 1) * g);\n      }\n\n      // Return information needed to create the text on the real canvas\n      return {\n        mu: mu,\n        occupied: occupied,\n        bounds: bounds,\n        gw: cgw,\n        gh: cgh,\n        fillTextOffsetX: fillTextOffsetX,\n        fillTextOffsetY: fillTextOffsetY,\n        fillTextWidth: fw,\n        fillTextHeight: fh,\n        fontSize: fontSize\n      };\n    };\n\n    /* Determine if there is room available in the given dimension */\n    var canFitText = function canFitText(gx, gy, gw, gh, occupied) {\n      // Go through the occupied points,\n      // return false if the space is not available.\n      var i = occupied.length;\n      while (i--) {\n        var px = gx + occupied[i][0];\n        var py = gy + occupied[i][1];\n\n        if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n          if (!settings.drawOutOfBound) {\n            return false;\n          }\n          continue;\n        }\n\n        if (!grid[px][py]) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    /* Actually draw the text on the grid */\n    var drawText = function drawText(gx, gy, info, word, weight,\n                                     distance, theta, rotateDeg, attributes) {\n\n      var fontSize = info.fontSize;\n      var color;\n      if (getTextColor) {\n        color = getTextColor(word, weight, fontSize, distance, theta);\n      } else {\n        color = settings.color;\n      }\n\n      var classes;\n      if (getTextClasses) {\n        classes = getTextClasses(word, weight, fontSize, distance, theta);\n      } else {\n        classes = settings.classes;\n      }\n\n      var dimension;\n      var bounds = info.bounds;\n      dimension = {\n        x: (gx + bounds[3]) * g,\n        y: (gy + bounds[0]) * g,\n        w: (bounds[1] - bounds[3] + 1) * g,\n        h: (bounds[2] - bounds[0] + 1) * g\n      };\n\n      elements.forEach(function(el) {\n        if (el.getContext) {\n          var ctx = el.getContext('2d');\n          var mu = info.mu;\n\n          // Save the current state before messing it\n          ctx.save();\n          ctx.scale(1 / mu, 1 / mu);\n\n          ctx.font = settings.fontWeight + ' ' +\n                     (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n          ctx.fillStyle = color;\n\n          // Translate the canvas position to the origin coordinate of where\n          // the text should be put.\n          ctx.translate((gx + info.gw / 2) * g * mu,\n                        (gy + info.gh / 2) * g * mu);\n\n          if (rotateDeg !== 0) {\n            ctx.rotate(- rotateDeg);\n          }\n\n          // Finally, fill the text.\n\n          // XXX: We cannot because textBaseline = 'top' here because\n          // Firefox and Chrome uses different default line-height for canvas.\n          // Please read https://bugzil.la/737852#c6.\n          // Here, we use textBaseline = 'middle' and draw the text at exactly\n          // 0.5 * fontSize lower.\n          ctx.textBaseline = 'middle';\n          ctx.fillText(word, info.fillTextOffsetX * mu,\n                             (info.fillTextOffsetY + fontSize * 0.5) * mu);\n\n          // The below box is always matches how <span>s are positioned\n          /* ctx.strokeRect(info.fillTextOffsetX, info.fillTextOffsetY,\n            info.fillTextWidth, info.fillTextHeight); */\n\n          // Restore the state.\n          ctx.restore();\n        } else {\n          // drawText on DIV element\n          var span = document.createElement('span');\n          var transformRule = '';\n          transformRule = 'rotate(' + (- rotateDeg / Math.PI * 180) + 'deg) ';\n          if (info.mu !== 1) {\n            transformRule +=\n              'translateX(-' + (info.fillTextWidth / 4) + 'px) ' +\n              'scale(' + (1 / info.mu) + ')';\n          }\n          var styleRules = {\n            'position': 'absolute',\n            'display': 'block',\n            'font': settings.fontWeight + ' ' +\n                    (fontSize * info.mu) + 'px ' + settings.fontFamily,\n            'left': ((gx + info.gw / 2) * g + info.fillTextOffsetX) + 'px',\n            'top': ((gy + info.gh / 2) * g + info.fillTextOffsetY) + 'px',\n            'width': info.fillTextWidth + 'px',\n            'height': info.fillTextHeight + 'px',\n            'lineHeight': fontSize + 'px',\n            'whiteSpace': 'nowrap',\n            'transform': transformRule,\n            'webkitTransform': transformRule,\n            'msTransform': transformRule,\n            'transformOrigin': '50% 40%',\n            'webkitTransformOrigin': '50% 40%',\n            'msTransformOrigin': '50% 40%'\n          };\n          if (color) {\n            styleRules.color = color;\n          }\n          span.textContent = word;\n          for (var cssProp in styleRules) {\n            span.style[cssProp] = styleRules[cssProp];\n          }\n          if (attributes) {\n            for (var attribute in attributes) {\n              span.setAttribute(attribute, attributes[attribute]);\n            }\n          }\n          if (classes) {\n            span.className += classes;\n          }\n          el.appendChild(span);\n        }\n      });\n    };\n\n    /* Help function to updateGrid */\n    var fillGridAt = function fillGridAt(x, y, drawMask, dimension, item) {\n      if (x >= ngx || y >= ngy || x < 0 || y < 0) {\n        return;\n      }\n\n      grid[x][y] = false;\n\n      if (drawMask) {\n        var ctx = elements[0].getContext('2d');\n        ctx.fillRect(x * g, y * g, maskRectWidth, maskRectWidth);\n      }\n\n      if (interactive) {\n        infoGrid[x][y] = { item: item, dimension: dimension };\n      }\n    };\n\n    /* Update the filling information of the given space with occupied points.\n       Draw the mask on the canvas if necessary. */\n    var updateGrid = function updateGrid(gx, gy, gw, gh, info, item) {\n      var occupied = info.occupied;\n      var drawMask = settings.drawMask;\n      var ctx;\n      if (drawMask) {\n        ctx = elements[0].getContext('2d');\n        ctx.save();\n        ctx.fillStyle = settings.maskColor;\n      }\n\n      var dimension;\n      if (interactive) {\n        var bounds = info.bounds;\n        dimension = {\n          x: (gx + bounds[3]) * g,\n          y: (gy + bounds[0]) * g,\n          w: (bounds[1] - bounds[3] + 1) * g,\n          h: (bounds[2] - bounds[0] + 1) * g\n        };\n      }\n\n      var i = occupied.length;\n      while (i--) {\n        var px = gx + occupied[i][0];\n        var py = gy + occupied[i][1];\n\n        if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n          continue;\n        }\n\n        fillGridAt(px, py, drawMask, dimension, item);\n      }\n\n      if (drawMask) {\n        ctx.restore();\n      }\n    };\n\n    /* putWord() processes each item on the list,\n       calculate it's size and determine it's position, and actually\n       put it on the canvas. */\n    var putWord = function putWord(item) {\n      var word, weight, attributes;\n      if (Array.isArray(item)) {\n        word = item[0];\n        weight = item[1];\n      } else {\n        word = item.word;\n        weight = item.weight;\n        attributes = item.attributes;\n      }\n      var rotateDeg = getRotateDeg();\n\n      // get info needed to put the text onto the canvas\n      var info = getTextInfo(word, weight, rotateDeg);\n\n      // not getting the info means we shouldn't be drawing this one.\n      if (!info) {\n        return false;\n      }\n\n      if (exceedTime()) {\n        return false;\n      }\n\n      // If drawOutOfBound is set to false,\n      // skip the loop if we have already know the bounding box of\n      // word is larger than the canvas.\n      if (!settings.drawOutOfBound) {\n        var bounds = info.bounds;\n        if ((bounds[1] - bounds[3] + 1) > ngx ||\n          (bounds[2] - bounds[0] + 1) > ngy) {\n          return false;\n        }\n      }\n\n      // Determine the position to put the text by\n      // start looking for the nearest points\n      var r = maxRadius + 1;\n\n      var tryToPutWordAtPoint = function(gxy) {\n        var gx = Math.floor(gxy[0] - info.gw / 2);\n        var gy = Math.floor(gxy[1] - info.gh / 2);\n        var gw = info.gw;\n        var gh = info.gh;\n\n        // If we cannot fit the text at this position, return false\n        // and go to the next position.\n        if (!canFitText(gx, gy, gw, gh, info.occupied)) {\n          return false;\n        }\n\n        // Actually put the text on the canvas\n        drawText(gx, gy, info, word, weight,\n                 (maxRadius - r), gxy[2], rotateDeg, attributes);\n\n        // Mark the spaces on the grid as filled\n        updateGrid(gx, gy, gw, gh, info, item);\n\n        return {\n          gx: gx,\n          gy: gy,\n          rot: rotateDeg,\n          info: info\n        };\n      };\n\n      while (r--) {\n        var points = getPointsAtRadius(maxRadius - r);\n\n        if (settings.shuffle) {\n          points = [].concat(points);\n          shuffleArray(points);\n        }\n\n        // Try to fit the words by looking at each point.\n        // array.some() will stop and return true\n        // when putWordAtPoint() returns true.\n        for (var i = 0; i < points.length; i++) {\n          var res = tryToPutWordAtPoint(points[i]);\n          if (res) {\n            return res;\n          }\n        }\n\n        // var drawn = points.some(tryToPutWordAtPoint);\n        // if (drawn) {\n        //   // leave putWord() and return true\n        //   return true;\n        // }\n      }\n      // we tried all distances but text won't fit, return null\n      return null;\n    };\n\n    /* Send DOM event to all elements. Will stop sending event and return\n       if the previous one is canceled (for cancelable events). */\n    var sendEvent = function sendEvent(type, cancelable, detail) {\n      if (cancelable) {\n        return !elements.some(function(el) {\n          var evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(type, true, cancelable, detail || {});\n          return !el.dispatchEvent(evt);\n        }, this);\n      } else {\n        elements.forEach(function(el) {\n          var evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(type, true, cancelable, detail || {});\n          el.dispatchEvent(evt);\n        }, this);\n      }\n    };\n\n    /* Start drawing on a canvas */\n    var start = function start() {\n      // For dimensions, clearCanvas etc.,\n      // we only care about the first element.\n      var canvas = elements[0];\n\n      if (canvas.getContext) {\n        ngx = Math.ceil(canvas.width / g);\n        ngy = Math.ceil(canvas.height / g);\n      } else {\n        var rect = canvas.getBoundingClientRect();\n        ngx = Math.ceil(rect.width / g);\n        ngy = Math.ceil(rect.height / g);\n      }\n\n      // Sending a wordcloudstart event which cause the previous loop to stop.\n      // Do nothing if the event is canceled.\n      if (!sendEvent('wordcloudstart', true)) {\n        return;\n      }\n\n      // Determine the center of the word cloud\n      center = (settings.origin) ?\n        [settings.origin[0]/g, settings.origin[1]/g] :\n        [ngx / 2, ngy / 2];\n\n      // Maxium radius to look for space\n      maxRadius = Math.floor(Math.sqrt(ngx * ngx + ngy * ngy));\n\n      /* Clear the canvas only if the clearCanvas is set,\n         if not, update the grid to the current canvas state */\n      grid = [];\n\n      var gx, gy, i;\n      if (!canvas.getContext || settings.clearCanvas) {\n        elements.forEach(function(el) {\n          if (el.getContext) {\n            var ctx = el.getContext('2d');\n            ctx.fillStyle = settings.backgroundColor;\n            ctx.clearRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n            ctx.fillRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n          } else {\n            el.textContent = '';\n            el.style.backgroundColor = settings.backgroundColor;\n            el.style.position = 'relative';\n          }\n        });\n\n        /* fill the grid with empty state */\n        gx = ngx;\n        while (gx--) {\n          grid[gx] = [];\n          gy = ngy;\n          while (gy--) {\n            grid[gx][gy] = true;\n          }\n        }\n      } else {\n        /* Determine bgPixel by creating\n           another canvas and fill the specified background color. */\n        var bctx = document.createElement('canvas').getContext('2d');\n\n        bctx.fillStyle = settings.backgroundColor;\n        bctx.fillRect(0, 0, 1, 1);\n        var bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n\n        /* Read back the pixels of the canvas we got to tell which part of the\n           canvas is empty.\n           (no clearCanvas only works with a canvas, not divs) */\n        var imageData =\n          canvas.getContext('2d').getImageData(0, 0, ngx * g, ngy * g).data;\n\n        gx = ngx;\n        var x, y;\n        while (gx--) {\n          grid[gx] = [];\n          gy = ngy;\n          while (gy--) {\n            y = g;\n            singleGridLoop: while (y--) {\n              x = g;\n              while (x--) {\n                i = 4;\n                while (i--) {\n                  if (imageData[((gy * g + y) * ngx * g +\n                                 (gx * g + x)) * 4 + i] !== bgPixel[i]) {\n                    grid[gx][gy] = false;\n                    break singleGridLoop;\n                  }\n                }\n              }\n            }\n            if (grid[gx][gy] !== false) {\n              grid[gx][gy] = true;\n            }\n          }\n        }\n\n        imageData = bctx = bgPixel = undefined;\n      }\n\n      // fill the infoGrid with empty state if we need it\n      if (settings.hover || settings.click) {\n\n        interactive = true;\n\n        /* fill the grid with empty state */\n        gx = ngx + 1;\n        while (gx--) {\n          infoGrid[gx] = [];\n        }\n\n        if (settings.hover) {\n          canvas.addEventListener('mousemove', wordcloudhover);\n        }\n\n        if (settings.click) {\n          canvas.addEventListener('click', wordcloudclick);\n          canvas.addEventListener('touchstart', wordcloudclick);\n          canvas.addEventListener('touchend', function (e) {\n            e.preventDefault();\n          });\n          canvas.style.webkitTapHighlightColor = 'rgba(0, 0, 0, 0)';\n        }\n\n        canvas.addEventListener('wordcloudstart', function stopInteraction() {\n          canvas.removeEventListener('wordcloudstart', stopInteraction);\n\n          canvas.removeEventListener('mousemove', wordcloudhover);\n          canvas.removeEventListener('click', wordcloudclick);\n          hovered = undefined;\n        });\n      }\n\n      i = 0;\n      var loopingFunction, stoppingFunction;\n      var layouting = true;\n      if (!settings.layoutAnimation) {\n        loopingFunction = function (cb) {\n          cb();\n        }\n        stoppingFunction = function () {\n          layouting = false;\n        }\n      }\n      else if (settings.wait !== 0) {\n        loopingFunction = window.setTimeout;\n        stoppingFunction = window.clearTimeout;\n      } else {\n        loopingFunction = window.setImmediate;\n        stoppingFunction = window.clearImmediate;\n      }\n\n      var addEventListener = function addEventListener(type, listener) {\n        elements.forEach(function(el) {\n          el.addEventListener(type, listener);\n        }, this);\n      };\n\n      var removeEventListener = function removeEventListener(type, listener) {\n        elements.forEach(function(el) {\n          el.removeEventListener(type, listener);\n        }, this);\n      };\n\n      var anotherWordCloudStart = function anotherWordCloudStart() {\n        removeEventListener('wordcloudstart', anotherWordCloudStart);\n        stoppingFunction(timer);\n      };\n\n      addEventListener('wordcloudstart', anotherWordCloudStart);\n\n      // At least wait the following code before call the first iteration.\n      var timer = (settings.layoutAnimation ? loopingFunction : setTimeout)(function loop() {\n        if (!layouting) {\n          return;\n        }\n        if (i >= settings.list.length) {\n          stoppingFunction(timer);\n          sendEvent('wordcloudstop', false);\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\n\n          return;\n        }\n        escapeTime = (new Date()).getTime();\n        var drawn = putWord(settings.list[i]);\n        var canceled = !sendEvent('wordclouddrawn', true, {\n          item: settings.list[i], drawn: drawn });\n        if (exceedTime() || canceled) {\n          stoppingFunction(timer);\n          settings.abort();\n          sendEvent('wordcloudabort', false);\n          sendEvent('wordcloudstop', false);\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\n          return;\n        }\n        i++;\n        timer = loopingFunction(loop, settings.wait);\n      }, settings.wait);\n    };\n\n    // All set, start the drawing\n    start();\n  };\n\n  WordCloud.isSupported = isSupported;\n  WordCloud.minFontSize = minFontSize;\n\n  export default WordCloud;","import * as echarts from 'echarts/lib/echarts';\n\nimport './WordCloudSeries';\nimport './WordCloudView';\n\nimport wordCloudLayoutHelper from './layout';\n\nif (!wordCloudLayoutHelper.isSupported) {\n    throw new Error('Sorry your browser not support wordCloud');\n}\n\n// https://github.com/timdream/wordcloud2.js/blob/c236bee60436e048949f9becc4f0f67bd832dc5c/index.js#L233\nfunction updateCanvasMask(maskCanvas) {\n    var ctx = maskCanvas.getContext('2d');\n    var imageData = ctx.getImageData(\n        0, 0, maskCanvas.width, maskCanvas.height);\n    var newImageData = ctx.createImageData(imageData);\n\n    var toneSum = 0;\n    var toneCnt = 0;\n    for (var i = 0; i < imageData.data.length; i += 4) {\n        var alpha = imageData.data[i + 3];\n        if (alpha > 128) {\n            var tone = imageData.data[i]\n                + imageData.data[i + 1]\n                + imageData.data[i + 2];\n            toneSum += tone;\n            ++toneCnt;\n        }\n    }\n    var threshold = toneSum / toneCnt;\n\n    for (var i = 0; i < imageData.data.length; i += 4) {\n        var tone = imageData.data[i]\n            + imageData.data[i + 1]\n            + imageData.data[i + 2];\n        var alpha = imageData.data[i + 3];\n\n        if (alpha < 128 || tone > threshold) {\n            // Area not to draw\n            newImageData.data[i] = 0;\n            newImageData.data[i + 1] = 0;\n            newImageData.data[i + 2] = 0;\n            newImageData.data[i + 3] = 0;\n        }\n        else {\n            // Area to draw\n            // The color must be same with backgroundColor\n            newImageData.data[i] = 255;\n            newImageData.data[i + 1] = 255;\n            newImageData.data[i + 2] = 255;\n            newImageData.data[i + 3] = 255;\n        }\n    }\n\n    ctx.putImageData(newImageData, 0, 0);\n}\n\necharts.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('wordCloud', function (seriesModel) {\n        var gridRect = echarts.helper.getLayoutRect(\n            seriesModel.getBoxLayoutParams(), {\n                width: api.getWidth(),\n                height: api.getHeight()\n            }\n        );\n        var data = seriesModel.getData();\n\n        var canvas = document.createElement('canvas');\n        canvas.width = gridRect.width;\n        canvas.height = gridRect.height;\n\n        var ctx = canvas.getContext('2d');\n        var maskImage = seriesModel.get('maskImage');\n        if (maskImage) {\n            try {\n                ctx.drawImage(maskImage, 0, 0, canvas.width, canvas.height);\n                updateCanvasMask(canvas);\n            }\n            catch (e) {\n                console.error('Invalid mask image');\n                console.error(e.toString());\n            }\n        }\n\n        var sizeRange = seriesModel.get('sizeRange');\n        var rotationRange = seriesModel.get('rotationRange');\n        var valueExtent = data.getDataExtent('value');\n\n        var DEGREE_TO_RAD = Math.PI / 180;\n        var gridSize = seriesModel.get('gridSize');\n        wordCloudLayoutHelper(canvas, {\n            list: data.mapArray('value', function (value, idx) {\n                var itemModel = data.getItemModel(idx);\n                return [\n                    data.getName(idx),\n                    itemModel.get('textStyle.fontSize', true)\n                        || echarts.number.linearMap(value, valueExtent, sizeRange),\n                    idx\n                ];\n            }).sort(function (a, b) {\n                // Sort from large to small in case there is no more room for more words\n                return b[1] - a[1];\n            }),\n            fontFamily: seriesModel.get('textStyle.fontFamily')\n                || seriesModel.get('emphasis.textStyle.fontFamily')\n                || ecModel.get('textStyle.fontFamily'),\n            fontWeight: seriesModel.get('textStyle.fontWeight')\n                || seriesModel.get('emphasis.textStyle.fontWeight')\n                || ecModel.get('textStyle.fontWeight'),\n\n            gridSize: gridSize,\n\n            ellipticity: gridRect.height / gridRect.width,\n\n            minRotation: rotationRange[0] * DEGREE_TO_RAD,\n            maxRotation: rotationRange[1] * DEGREE_TO_RAD,\n\n            clearCanvas: !maskImage,\n\n            rotateRatio: 1,\n\n            rotationStep: seriesModel.get('rotationStep') * DEGREE_TO_RAD,\n\n            drawOutOfBound: seriesModel.get('drawOutOfBound'),\n\n            layoutAnimation: seriesModel.get('layoutAnimation'),\n\n            shuffle: false,\n\n            shape: seriesModel.get('shape')\n        });\n\n        function onWordCloudDrawn(e) {\n            var item = e.detail.item;\n            if (e.detail.drawn && seriesModel.layoutInstance.ondraw) {\n                e.detail.drawn.gx += gridRect.x / gridSize;\n                e.detail.drawn.gy += gridRect.y / gridSize;\n                seriesModel.layoutInstance.ondraw(\n                    item[0], item[1], item[2], e.detail.drawn\n                );\n            }\n        }\n\n        canvas.addEventListener('wordclouddrawn', onWordCloudDrawn);\n\n        if (seriesModel.layoutInstance) {\n            // Dispose previous\n            seriesModel.layoutInstance.dispose();\n        }\n\n        seriesModel.layoutInstance = {\n            ondraw: null,\n\n            dispose: function () {\n                canvas.removeEventListener('wordclouddrawn', onWordCloudDrawn);\n                // Abort\n                canvas.addEventListener('wordclouddrawn', function (e) {\n                    // Prevent default to cancle the event and stop the loop\n                    e.preventDefault();\n                });\n            }\n        };\n    });\n});\n\necharts.registerPreprocessor(function (option) {\n    var series = (option || {}).series;\n    !echarts.util.isArray(series) && (series = series ? [series] : []);\n\n    var compats = ['shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\n\n    echarts.util.each(series, function (seriesItem) {\n        if (seriesItem && seriesItem.type === 'wordCloud') {\n            var textStyle = seriesItem.textStyle || {};\n\n            compatTextStyle(textStyle.normal);\n            compatTextStyle(textStyle.emphasis);\n        }\n    });\n\n    function compatTextStyle(textStyle) {\n        textStyle && echarts.util.each(compats, function (key) {\n            if (textStyle.hasOwnProperty(key)) {\n                textStyle['text' + echarts.format.capitalFirst(key)] = textStyle[key];\n            }\n        });\n    }\n});\n","module.exports = __WEBPACK_EXTERNAL_MODULE__83__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(638);\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}